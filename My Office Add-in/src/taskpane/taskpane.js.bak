    // await context.sync();

    // var list = [];

    // let firstParagraph = context.document.body.paragraphs.getFirst();
    // let currentParagraph = firstParagraph;
    // let lastParagraph = context.document.body.paragraphs.getLast();
    // let nombreParagraph = 1;

    // try {
    //   while (currentParagraph !== lastParagraph) {
    //     // if (currentParagraph == lastParagraph)
    //     //   return console.log("On a trouvé le dernier paragraphe, on abort")
    //     currentParagraph.font.color = "blue";
    //     nombreParagraph = nombreParagraph + 1;
    //     list.push(currentParagraph);
    //     console.log(`${list.length} tagada`);

    //     currentParagraph = await currentParagraph.getNext();
    //     await context.sync();
    //   }
    // } catch (e) {
    //   if (e.code == "ItemNotFound") {
    //     console.warn("[ERREUR] Pas possible d'aller plus loin dans la boucle")
    //   } else {
    //     console.warn("Erreur sur la boucle");
    //     console.warn(e);
    //     // currentParagraph.font.color = "red";
    //     return await context.sync();
    //   }
    // }

    // console.log("test")
    // console.log(`Il y'a ${list.length} paragraphes`)

    // console.log("Test")
    // console.log(list);




/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */

// images references in the manifest
import "../../assets/icon-16.png";
import "../../assets/icon-32.png";
import "../../assets/icon-80.png";
//import { exitCode } from "process";
//import { lineBreak } from "acorn";

/* global document, Office, Word */

Office.onReady((info) => {
  if (info.host === Office.HostType.Word) {
    document.getElementById("sideload-msg").style.display = "none";
    document.getElementById("app-body").style.display = "flex";
    document.getElementById("run").onclick = run;
  }
});
const p

export async function run() {
  return Word.run(async (context) => {

    const range = context.document.body;
    const paragraphs = range.paragraphs;
    let ranges;
    paragraphs.load();

     context.sync()
      .then(() => {
        // Tableau qui stock les paragraphes
        // /** @type {Word.ParagraphCollection} */
        let arrayRanges = [];
        let i = 0;

        // Boucle while qui recup tous les paragraphes en découpant à chaque "."
        while (paragraphs.items.length > i) {
          // console.log(paragraphs.items[i]);
          arrayRanges.push(paragraphs.items[i].getTextRanges(['.'], true));
          i++;
        }
        const rangeResult = arrayRanges;
        rangeResult.load()
        context.sync()
        .then(() => {
        console.log(rangeResult.items[i]);
        });

        // paragraphs.items[0].getTextRanges(['.'], true);
        
        // for (var i = 0; i < paragraphs.items.length; i++) {
        //   ranges = paragraphs.items[i].getTextRanges(['.'], true);     
        //   ranges.load();
        //   context.sync()
        //     .then(() => {
        //       for (var j = 0; j < ranges[i]; j++) {
        //         ranges.load();
        //         console.log("12");
        //       }
        //     });
        // }

        // for (var i = 0; i < paragraphs.items.length; i++) {
          // ranges = paragraphs.items[i].getTextRanges(['.'], true).load();
          // context.sync()
          //   .then(() => {
          //      test(ranges);
          //   });


          // context.sync()
          //   .then(() => {
          //     ranges.items.forEach((range) => {
          //       console.log(range.text);
          //     });
          //   });
        // }

        // context.sync()
        //   .then(() => {
        //     ranges.items.forEach((range) => {
        //       console.log(range.text);
        //     });
        //   });

      });
  });

  function test(ranges) {

    ranges.items.forEach((range) => {
      console.log(range.text);
    });
    return context.sync();
  }
}

export async function load(){
  
}`